<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ChatCore</name>
    </assembly>
    <members>
        <member name="M:ChatCore.ChatCoreInstance.RunAllServices">
            <summary>
            Starts all services if they haven't been already.
            </summary>
            <returns>A reference to the generic service multiplexer</returns>
        </member>
        <member name="M:ChatCore.ChatCoreInstance.StopAllServices">
            <summary>
            Stops all services as long as no references remain. Make sure to unregister any callbacks first!
            </summary>
        </member>
        <member name="M:ChatCore.ChatCoreInstance.RunTwitchServices">
            <summary>
            Starts the Twitch services if they haven't been already.
            </summary>
            <returns>A reference to the Twitch service</returns>
        </member>
        <member name="M:ChatCore.ChatCoreInstance.StopTwitchServices">
            <summary>
            Stops the Twitch services as long as no references remain. Make sure to unregister any callbacks first!
            </summary>
        </member>
        <member name="M:ChatCore.ChatCoreInstance.LaunchWebApp">
            <summary>
            Launches the settings WebApp in the users default browser.
            </summary>
        </member>
        <member name="M:ChatCore.Config.ConfigBase`1.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            A base config class that can be used to quickly and easily implement config files with a variety of data types.
            </summary>
            <param name="configDirectory">The directory the config should be loaded from/saved to</param>
            <param name="configName">The name of the config file, excluding a filetype (which will be .ini)</param>
            <param name="saveTriggersConfigChangedEvent">If set to true, saving the config will trigger the OnConfigChanged event</param>
            <param name="oldStreamCoreConfigPath">The p</param>
        </member>
        <member name="M:ChatCore.Config.ObjectSerializer.GetSettingsAsHTML(System.Object)">
            <summary>
            Returns a dictionary containing HTML representing each config section.
            </summary>
            <param name="obj">The object to serialize into HTML</param>
            <returns></returns>
        </member>
        <member name="M:ChatCore.Config.ObjectSerializer.SetFromDictionary(System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets class values from a web post request
            </summary>
            <param name="obj"></param>
            <param name="postData"></param>
        </member>
        <member name="T:ChatCore.Config.StreamCoreConfigConverter`1">
            <summary>
            The purpose of this class is to provide a simple interface for converting an old StreamCore config file into ChatCore.
            </summary>
        </member>
        <member name="P:ChatCore.Interfaces.IChatEmote.Type">
            <summary>
            The type of resource associated with this chat emote
            </summary>
        </member>
        <member name="P:ChatCore.Interfaces.IChatEmote.UVs">
            <summary>
            The UV coordinates of this emote, only used if <see cref="P:ChatCore.Interfaces.IChatEmote.Type"/> is <see cref="F:ChatCore.Models.EmoteType.SpriteSheet"/>
            <para>X, Y = X/Y Position</para>
            <para>Z, W = Width/Height</para>
            </summary>
        </member>
        <member name="P:ChatCore.Interfaces.IChatMessage.Id">
            <summary>
            The internal identifier for this chat message
            </summary>
        </member>
        <member name="P:ChatCore.Interfaces.IChatMessage.IsSystemMessage">
            <summary>
            True if this message was generated by the underlying chat service, and not by another user.
            </summary>
        </member>
        <member name="P:ChatCore.Interfaces.IChatMessage.IsActionMessage">
            <summary>
            True if the message is a /me message, or whatever the equivalent is on the current chat service.
            </summary>
        </member>
        <member name="P:ChatCore.Interfaces.IChatMessage.IsHighlighted">
            <summary>
            True if the message should be highlighted (pings, subscriber notifications, etc)
            </summary>
        </member>
        <member name="P:ChatCore.Interfaces.IChatMessage.IsPing">
            <summary>
            True if the logged in user was tagged/pinged in this message.
            </summary>
        </member>
        <member name="P:ChatCore.Interfaces.IChatMessage.Message">
            <summary>
            The exact message the user sent into the chat, *with* any custom formatting applied by the chat service.
            </summary>
        </member>
        <member name="P:ChatCore.Interfaces.IChatMessage.Sender">
            <summary>
            The user who sent this message
            </summary>
        </member>
        <member name="P:ChatCore.Interfaces.IChatMessage.Channel">
            <summary>
            The channel this message was sent in
            </summary>
        </member>
        <member name="P:ChatCore.Interfaces.IChatMessage.Emotes">
            <summary>
            A list of *all* the emotes/emojis contained in this message, in reverse order to make replacing them with something else extremely simple.
            </summary>
        </member>
        <member name="P:ChatCore.Interfaces.IChatMessage.Metadata">
            <summary>
            All the raw metadata associated with this message. This contains platform-specific data for devs who want to access any extra data that may not have been parsed.
            </summary>
        </member>
        <member name="P:ChatCore.Interfaces.IChatService.DisplayName">
            <summary>
            The display name of the service(s)
            </summary>
        </member>
        <member name="E:ChatCore.Interfaces.IChatService.OnLogin">
            <summary>
            Callback that occurs when a successful login to the provided streaming service occurs 
            </summary>
        </member>
        <member name="E:ChatCore.Interfaces.IChatService.OnTextMessageReceived">
            <summary>
            Callback that occurs when a text message is received
            </summary>
        </member>
        <member name="E:ChatCore.Interfaces.IChatService.OnJoinChannel">
            <summary>
            Callback that occurs when the user joins a chat channel
            </summary>
        </member>
        <member name="E:ChatCore.Interfaces.IChatService.OnRoomStateUpdated">
            <summary>
            Callback that occurs when a chat channel receives updated info
            </summary>
        </member>
        <member name="E:ChatCore.Interfaces.IChatService.OnLeaveChannel">
            <summary>
            Callback that occurs when the user leaves a chat channel
            </summary>
        </member>
        <member name="E:ChatCore.Interfaces.IChatService.OnChatCleared">
            <summary>
            Callback that occurs when a users chat is cleared. If null, that means the entire chat was cleared; otherwise the argument is a user id.
            </summary>
        </member>
        <member name="E:ChatCore.Interfaces.IChatService.OnMessageCleared">
            <summary>
            Callback that occurs when a specific chat message is cleared. Argument is the message id to be cleared.
            </summary>
        </member>
        <member name="E:ChatCore.Interfaces.IChatService.OnChannelResourceDataCached">
            <summary>
            Fired once all known resources have been cached for this channel
            </summary>
        </member>
        <member name="M:ChatCore.Interfaces.IChatService.SendTextMessage(System.String,ChatCore.Interfaces.IChatChannel)">
            <summary>
            Sends a text message to the specified IChatChannel
            </summary>
            <param name="message">The text message to be sent</param>
            <param name="channel">The chat channel to send the message to</param>
        </member>
        <member name="P:ChatCore.Models.Twitch.TwitchEmote.Bits">
            <summary>
            The number of bits associated with this emote (probably a cheermote)
            </summary>
        </member>
        <member name="P:ChatCore.Models.Twitch.TwitchEmote.Color">
            <summary>
            If there are bits associated with this emote, this is the color the bits text should be.
            </summary>
        </member>
        <member name="P:ChatCore.Models.Twitch.TwitchMessage.Type">
            <summary>
            The IRC message type for this TwitchMessage
            </summary>
        </member>
        <member name="P:ChatCore.Models.Twitch.TwitchMessage.Bits">
            <summary>
            The number of bits in this message, if any.
            </summary>
        </member>
        <member name="P:ChatCore.Models.Twitch.TwitchRoomstate.SlowModeInterval">
            <summary>
            The number of seconds a chatter without moderator privileges must wait between sending messages
            </summary>
        </member>
        <member name="P:ChatCore.Models.Twitch.TwitchRoomstate.MinFollowTime">
            <summary>
            If FollowersOnly is true, this specifies the number of minutes a user must be following before they can chat.
            </summary>
        </member>
        <member name="T:ChatCore.Services.ChatServiceMultiplexer">
            <summary>
            A multiplexer for all the supported streaming services.
            </summary>
        </member>
        <member name="M:ChatCore.Services.Twitch.TwitchMessageParser.ParseRawMessage(System.String,System.Collections.Concurrent.ConcurrentDictionary{System.String,ChatCore.Interfaces.IChatChannel},ChatCore.Interfaces.IChatUser,ChatCore.Interfaces.IChatMessage[]@)">
            <summary>
            Takes a raw Twitch message and parses it into an IChatMessage
            </summary>
            <param name="rawMessage">The raw message sent from Twitch</param>
            <param name="parsedMessages">A list of chat messages that were parsed from the rawMessage</param>
            <returns>True if parsedMessages.Count > 0</returns>
        </member>
        <member name="M:ChatCore.Services.Twitch.TwitchService.SendRawMessage(System.String,System.Boolean)">
            <summary>
            Sends a raw message to the Twitch server
            </summary>
            <param name="rawMessage">The raw message to send.</param>
            <param name="forwardToSharedClients">
            Whether or not the message should also be sent to other clients in the assembly that implement StreamCore, or only to the Twitch server.<br/>
            This should only be set to true if the Twitch server would rebroadcast this message to other external clients as a response to the message.
            </param>
        </member>
    </members>
</doc>
